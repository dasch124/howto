diff --git a/node_modules/next/dist/client/link.js b/node_modules/next/dist/client/link.js
index cf9d6b7..c59a046 100755
--- a/node_modules/next/dist/client/link.js
+++ b/node_modules/next/dist/client/link.js
@@ -56,7 +56,7 @@ function linkClicked(e, router, href, as, replace, shallow, scroll, locale, star
     const { nodeName  } = e.currentTarget;
     // anchors inside an svg have a lowercase nodeName
     const isAnchorNodeName = nodeName.toUpperCase() === 'A';
-    if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {
+    if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href) || e.currentTarget.hasAttribute('download'))) {
         // ignore click for browserâ€™s default behavior
         return;
     }
diff --git a/node_modules/next/dist/shared/lib/router/router.js b/node_modules/next/dist/shared/lib/router/router.js
index d7e301a..6caad5e 100755
--- a/node_modules/next/dist/shared/lib/router/router.js
+++ b/node_modules/next/dist/shared/lib/router/router.js
@@ -188,6 +188,12 @@ function resolveHref(router, href, resolveAs) {
     // we use a dummy base url for relative urls
     let base;
     let urlAsString = typeof href === 'string' ? href : (0, _formatUrl).formatWithValidation(href);
+    // Return because it cannot be routed by the Next.js router
+    if (!isLocalURL(urlAsString)) {
+      return resolveAs ? [
+          urlAsString
+      ] : urlAsString;
+    }
     // repeated slashes and backslashes in the URL are considered
     // invalid and will never match a Next.js page/file
     const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\/\//);
@@ -198,12 +204,6 @@ function resolveHref(router, href, resolveAs) {
         const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);
         urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;
     }
-    // Return because it cannot be routed by the Next.js router
-    if (!isLocalURL(urlAsString)) {
-        return resolveAs ? [
-            urlAsString
-        ] : urlAsString;
-    }
     try {
         base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');
     } catch (_) {
